% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tuneThreshold.R
\name{tuneThreshold}
\alias{tuneThreshold}
\title{Tunes adjacency matrix cutoff threshold}
\usage{
tuneThreshold(data, ugene, cutoffs = NULL, showPareto = TRUE)
}
\arguments{
\item{data}{Required. Same data as provided to inferNetwork().}

\item{ugene}{Required. Output of the inferNetwork() function.}

\item{cutoffs}{Optional. When not provided, edges are removed in two ways. Both
cases start with a sparse network, one that has at least one
connection/edge per column of the network matrix. This ensures that for each
node, at least one node is used as input to the model.
\itemize{
    \item Column-wise: The sparsest network is that with the maximum of each
    column as its only connections. Edges are incrementally added
    by including edges with the next highest importance score for each column.
    This continues until each column has exactly one missing edge.
    \item Step-wise: Let \eqn{n} be the number of genes. Start with taking
    the maximum \eqn{n} elements as edges. Add more edges in descending order
    of the importance score until there is at least one connection per column.
    Edges are incrementally added by including edges with the
    next highest importance score over the entire matrix..
}
If provided, the cutoffs should be a vector of double numerics between
0 and 1 exclusive. For each cutoff, all connections in the learned network
with values below the cutoff will be masked. If the result of the mask happens
to remove an entire column of the network matrix, there will be an error.}

\item{showPareto}{Optional. If TRUE (default), shows a plot of the mean
squared residual error of the fitted random forests for all nodes, versus the
complexity of the network. The ideal network complexity should be
the smallest number of connections at which the error drops steeply (known as
an Pareto front).}
}
\value{
An object of class "ugene.analysis" that contains the following:
\itemize{
    \item stepErrors - a vector of numerics, the average mean squared error
    of the random forests used for prediction, in the order of sparsest to
    more complex networks.
    \item colErrors - a vector of numerics, same as stepErrors but constructed
    with the masks described above as column-wise.
    \item stepMasks - a list of matrices, the masks constructed by the
    step-wise method.
    \item colMasks - a list of matrices, the masks constructed by the column-wise
    method.
}
}
\description{
Performs a search over possible cutoff thresholds \eqn{\epsilon}. All edges
with an importance score below \eqn{\epsilon} are removed and the random
forests are retrained without those connections.
}
\examples{
\dontrun{
   # Automatic threshold tuning
   ugene <- inferNetwork(Repressilator, mtry = 3L)
   result <- tuneThreshold(Repressilator, ugene)

   # take a look at network corresponding to the third and seventh
   # step-wise mask (both has drops in mse)
   inferNetwork(Repressilator, mask = result$stepMasks[[3]], showPlot = TRUE)
   inferNetwork(Repressilator, mask = result$stepMasks[[7]], showPlot = TRUE)

   # Custom threshold tuning
   ugene <- inferNetwork(Repressilator, mtry = 3L)
   result <- tuneThreshold(Repressilator, ugene,
                           cutoffs=seq(from = 0.1, to = 0.5, by = 0.05))
}

}
